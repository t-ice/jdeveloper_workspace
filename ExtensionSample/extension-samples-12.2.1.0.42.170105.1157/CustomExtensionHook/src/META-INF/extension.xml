<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Header: jdev/src/esdk-samples/sample/CustomExtensionHook/src/META-INF/extension.xml /main/13 2014/03/18 17:54:19 ppark Exp $  -->

<!--
 Copyright (c) 2007, 2014, Oracle and/or its affiliates. All rights reserved.

   MODIFIED   (MM/DD/YY)
   aalmiray    09/21/09 - XbranchMerge aalmiray_fix_esdk_samples from
                          st_jdevadf_patchset_ias
   ltribble    08/16/08 - 
   bduff       05/29/07 - Bug 6080680 - Missing imports preventing compile.
   bduff       04/04/07 - Bug 5957834 - Use UTF-8
   bduff       02/27/07 - Added copyright header. Update for 11.1.1

-->
<extension xmlns="http://jcp.org/jsr/198/extension-manifest"
           id="oracle.ide.extsamples.customhook"
           version="11.1.1"
           esdk-version="1.0">
           
  <name>ESDK Sample - CustomExtensionHook</name>
  <owner>Oracle</owner>
 
<trigger-hooks xmlns="http://xmlns.oracle.com/ide/extension">
    <triggers>
    <!-- Install an action to list all widgets. -->
   <!-- 
        Define an action that will be used in various menus and toolbars.
        You can set any Swing action property on the action. The controller
        class implements oracle.ide.controller.Controller and determines
        when the action is enabled and what it does.  
    -->
      <actions xmlns="http://xmlns.oracle.com/jdeveloper/1013/extension">
        <action id="oracle.ide.samples.customhook.ListWidgetsAction">
          <properties>
            <!--
             You can use an ampersand (escaped as &amp;) in the Name property
             to specify the mnemonic for any menu items containing the action.
             -->
             <property name="Name">ESDK Sample: All Widgets</property>
             <!-- use an icon, stealing this one from predefined icons              
                  make sure you have oracle.icon as a required bundle to
                  pick up this icon at run time from the icons module  -->
            <property name="SmallIcon">${OracleIcons.URL_VIEW_ACTIVITY}</property>
            <property name="LongDescription">ESDK Sample: All Widgets </property>
          </properties>
        </action>
      </actions> 
     
      <controllers xmlns="http://xmlns.oracle.com/ide/extension">
        <controller class="oracle.ide.samples.customhook.WidgetController">
          <update-rules>
            <update-rule rule="always-enabled">
              <action id="oracle.ide.samples.customhook.ListWidgetsAction">
                <label>ESDK Sample: All Widgets</label>
              </action>
            </update-rule>
          </update-rules>
        </controller>
      </controllers>
      
      
    
    <menu-hook  xmlns="http://jcp.org/jsr/198/extension-manifest">
      <menus>
        <menubar id="javax.ide.view.MAIN_WINDOW_MENUBAR_ID">
            <menu id="View">
            <section id="ESDK" weight="2.0">
              <item action-ref="oracle.ide.samples.customhook.ListWidgetsAction" /> 
            </section>
          </menu>
        </menubar>
      </menus>
    </menu-hook>        
 </triggers>    
</trigger-hooks>
     
    
  <hooks>
    
    <!-- Define the HashStructureHook as the handler for the widgets element -->
    <hook-handler-hook>
      <hook-handler tag-name="widgets"
        handler-class="oracle.ide.extension.HashStructureHook"
        namespace="http://xmlns.oracle.com/ide/samples/customhooks"
        schema-location="widgethook.xsd" />
    </hook-handler-hook>
    <!-- Use the widgets element. We can use this element anywhere after
         the hook-handler-hook that declares it, and in the manifest of 
         any extension that depends on this one. -->
    <widgets xmlns="http://xmlns.oracle.com/ide/samples/customhooks">
      <widget id="one">
        <name>One</name>
        <description>First widget</description>
        <listener-class>oracle.ide.samples.customhook.WidgetListenerExample</listener-class>
      </widget>
      <widget id="two">
        <name>Two</name>
        <description>Second widget</description>
        <listener-class>oracle.ide.samples.customhook.WidgetListenerExample</listener-class>
      </widget>
    </widgets>
    
     
      
  </hooks>
</extension>
